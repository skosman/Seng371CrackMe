/**
 *  This was the code generated by a Java specific reverse engineering tool
 *  ByteCode Reviewer, might help with clarification
 */

package agz.name.c005;

import I.I;
import java.util.Base64;
import java.util.Scanner;

public class Crackme005 {
    public static final void main(String[] var0) {
        byte var1 = 5;
        exit(var1);
        System.out.println(getRuntime(I.I(1)));
        String var2 = equals();
        System.out.println(getRuntime(I.I(14)));
        String var3 = equals();
        if (!append(var3)) {
            System.out.println(I.I(35));
        } else {
            double var4 = Double.parseDouble(var3);
            double var6 = decode(var4);
            double var8 = availableProcessors(var2);
            double var10 = decode(var8);
            int var12 = (int)var10;
            int var13 = (int)var6;
            boolean var14 = getDecoder(var10, var4);
            length(var14);
        }

        in();
    }

    private static boolean append(String var0) {
        try {
            Double.parseDouble(var0);
            return true;
        } catch (Exception var2) {
            return false;
        }
    }

    private static double availableProcessors(String var0) {
        StringBuilder var1 = new StringBuilder();
        char[] var2 = var0.toCharArray();
        int var3 = var2.length;

        for(int var4 = 0; var4 < var3; ++var4) {
            char var5 = var2[var4];
            var1.append(var5);
        }

        return new Double(var1.toString());
    }

    private static double decode(double var0) {
        if (var0 == 0.0D) {
            System.out.println(getRuntime(I.I(319)));
            System.exit(0);
            return 0.0D;
        } else {
            double var4 = (double)Runtime.getRuntime().availableProcessors();
            double var6 = (double)Runtime.getRuntime().totalMemory();
            double var2 = var0 - var6 / 1.0E8D;
            var2 += var4 * 28.0D;
            var2 += var6 / 107543.0D;
            double var8 = (double)Double.toString(var0).length();
            var2 -= var6 / var8;
            return var2;
        }
    }

    private static String doubleValue(double var0) {
        return Double.toString(var0);
    }

    private static String equals() {
        Scanner var0 = new Scanner(System.in);
        String var1 = var0.nextLine();
        return var1;
    }

    private static void exit(int num) {
        System.out.println("");
        System.out.println(I.I(364) + num);
        System.out.println(I.I(380));
        System.out.println(I.I(411));
        System.out.println("");
    }

    private static boolean getDecoder(double num1, double num2) {
        String str1 = doubleValue(num1);
        String str2 = doubleValue(num2);
        boolean boo = false;
        boo = str1.equals(str2);
        return boo;
    }

    private static String getRuntime(String str) {
        byte[] decodedByte = Base64.getDecoder().decode(str);
        String decodeStr = new String(decodedByte);
        return decodeStr;
    }

    private static void in() {
        System.out.println("");
        System.out.println(I.I(65));
        System.out.println(I.I(83));
        System.out.println(I.I(108));
        System.out.println(I.I(125));
        System.out.println(I.I(146));
    }

    private static void length(boolean var0) {
        if (var0) {
            System.out.println(getRuntime(I.I(181)));
        } else {
            System.out.println(getRuntime(I.I(254)));
        }

    }
}
